Spring Data JPA, фактически, является очередной абстракцией над Hibernate (Hibernate же является реализацией
спецификации JPA). Ну а на самом нижнем уровне по-прежнему JDBC.

Spring Data генерирует стандартный код для работы с базами данных, для этого достаточно указать сущность для которой
нужно сгенерировать этот код и тип ID этой сущности.

Spring Data JPA предоставляет следующий набор репозиториев. Каждый следующий расширяет возможности предыдущего.

1) Базовый интерфейс
public interface Repository<T, ID> {}

2) CrudRepository - предоставляет набор базовых CRUD операций

public interface CrudRepository<T, ID> extends Repository<T, ID> {

<S extends T> S save(S var1);
<S extends T> Iterable<S> saveAll(Iterable<S> var1);
Optional<T> findById(ID var1);
boolean existsById(ID var1);
Iterable<T> findAll();
Iterable<T> findAllById(Iterable<ID> var1);
long count();
void deleteById(ID var1);
void delete(T var1);
void deleteAll(Iterable<? extends T> var1);
void deleteAll();
}

3) PagingAndSortingRepository - добавляет возможность использования пагинации и сортировки

public interface PagingAndSortingRepository<T, ID extends Serializable> extends CrudRepository<T, ID> {

Iterable<T> findAll(Sort sort);
Page<T> findAll(Pageable pageable);
}

4) JpaRepository

public interface JpaRepository<T, ID> extends PagingAndSortingRepository<T, ID>, QueryByExampleExecutor<T> {

List<T> findAll();
List<T> findAll(Sort var1);
List<T> findAllById(Iterable<ID> var1);
<S extends T> List<S> saveAll(Iterable<S> var1);
void flush();
<S extends T> S saveAndFlush(S var1);
void deleteInBatch(Iterable<T> var1);
void deleteAllInBatch();
T getOne(ID var1);
<S extends T> List<S> findAll(Example<S> var1);
<S extends T> List<S> findAll(Example<S> var1, Sort var2);
}
