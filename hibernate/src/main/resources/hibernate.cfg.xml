<!--connection.driver_class - имя класса JDBC-драйвера для БД к которой мы должны подключиться. Данный драйвер должен быть-->
<!--подключен к проекту как maven-зависимость или каким-то другим способом добавлен в classpath проекта;-->

<!--connection.url - url для подключения к серверу базы данных. В данном случае сервер базы данных развернут на-->
<!--локальной машине, на стандартном порту 5432, и имя базы данных - postgres;-->

<!--connection.username, connection.password - логин/пароль пользователя;-->

<!--connection.pool_size - размер пула соединений;-->

<!--dialect - задает класс-описатель диалекта SQL для конкретной БД. Диалект нужен чтобы Hibernate корректно формировал-->
<!--запросы для используемой СУБД. Нужно указать класс, который соответствует типу и версии БД, которая у вас установлена;-->

<!--show_sql - включает отображение в логах сервера SQL запросов, которые Hibernate выполняет в процессе работы. Оченьполезна-->
<!--в учебных целях и для отладки, но может очень сильно снизить производительность приложения. Поэтому в рабочих версиях-->
<!--приложения ее обычно отключают;-->

<!--hibernate.hbm2ddl.auto - очень важная настройка, которая задает режим Hibernate для работы со структурой таблиц в БД.-->
<!--Разберем некоторые возможные значения этой настройки-->

<!--        ○ none - никаких действий при запуске приложения не выполняется. Если структура таблиц не соответствует структуре-->
<!--        классов-сущностей приложения то в процессе работы могут возникнуть ошибки-->

<!--        ○ create - база данных будет создана при запуске приложения, причем все ранее находившиеся в ней таблицы будут-->
<!--        удалены и все данные из них потеряны.-->

<!--        ○ update - структура БД будет обновляться в соответствии со структурой классов-сущностей в приложении. Этот режим-->
<!--        наиболее удобен на начальном этапе разработки и в учебных проектах.-->

<!--        ○ validate - при запуске приложения осуществляется проверка структуры таблиц БД на соответствие структуре классов-->
<!--        сущностей в приложении. Если структуры не соответствуют, то приложение завершится с ошибкой. Данный режим чаще-->
<!--        всего используется в реальных приложениях.-->

<!--current_session_context_class - указание области видимости сессии, в данном случае для каждого потока будет своя сессия;-->

<!--mapping class - перечисление хранимых классов.-->


<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <property name="connection.driver_class">org.h2.Driver</property>
        <property name="connection.url">jdbc:h2:mem:mydatabase;MODE=PostgreSQL</property>
        <property name="connection.username">sa</property>
        <property name="connection.password"></property>
        <property name="connection.pool_size">2</property>
        <property name="dialect">org.hibernate.dialect.H2Dialect</property>
        <property name="show_sql">true</property>
        <property name="current_session_context_class">thread</property>
        <property name="hibernate.hbm2ddl.auto">create-drop</property>

        <mapping class="com.example.hibernate.User"/>
    </session-factory>
</hibernate-configuration>